t.grid <- (1:p-1)/(p-1)
## #############################
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
round(26.8, 0)
floor(matrix(1.5,1.1,2,1))
floor(matrix(c(1.5,1.1),2,1))
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
60+53
gap_len       <- 5     # orig data was interpolated piecwiese local constant (knot-distance: 5)
grid_len_orig <- 862   # grid length of original data
video_len_sec <- 113 # length (in seconds) of the video
sec_per_ind   <- video_len_sec/grid_len_orig # seconds per grid ('ind-ex') point
sec_per_ind
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
rm(list=ls())
## External Packages:
library("glmulti")    # glm: subset selection
library("scales")     # colorscales
library("lubridate")  # working with times and dates
library("stargazer")  # LaTeX tables
library("rcompanion") # stats for glm
library("Hmisc")      # further stats for glm
library("devtools")   # install packages
## Set 'your_path' to 'GFLMPOI_blinded':
#my_path <- "your_path/GFLMPOI_blinded/"
my_path <- "/home/dom/ownCloud/PoIGLMShared/R_Codes_and_Data/GFLMPOI_blinded/"
## Install the a ccompaning R-package GFLMPOI
remove.packages("GFLMPOI")
devtools::install(pkg=paste0(my_path,"GFLMPOI"))
## Load the accompaning R-package GFLMPOI
library("GFLMPOI")
## Attach the data
data("VideoRatingData")
## Variables: #################
Y     <- VideoRatingData$Y
X.mat <- t(as.matrix(VideoRatingData[,-1]))
##
(p     <- nrow(X.mat))
(N     <- ncol(X.mat))
##
a      <- 0
b      <- 1
t.grid <- (1:p-1)/(p-1)
## #############################
## Figure of rating trajectories
par(mar=c(4,5,4,1)+.1, cex.lab=1.3, cex=1.3)
matplot(t.grid, X.mat, type = "l", lty=1, lwd=1, col=alpha("black", 0.55), xlab="", ylab="")
mtext(side = 1, text = "Time (Standardized)", line = 3, at = 0.5, cex=1.3)
mtext(side = 3, text = "very\npositive", line = -1.25, at = -.1, cex=1.3)
mtext(side = 1, text = "very\nnegative", line = -.5,  at = -.1, cex=1.3)
par(mar=c(5,4,4,2)+.1)
dev.off()
## Estimation
result.obj  <- FUN_PoI_BIC(Y             = Y,
X.mat         = X.mat,
S.max         = 3)
##
summary(result.obj$glm.obj)
## Video time-points (min, sec) of the selected PoIs
PoI_seconds <- TauIndHat_to_VideoSec(TauIndHat = result.obj$tau.ind.hat)
seconds_to_period(PoI_seconds)
remove.packages("ReconstPoFD")
rm(list = ls())
library("devtools")
setwd("/home/dom/git_repos/ReconstPoFD")
## creats the basic package structure:
## devtools::create("ReconstPoFD")
## Produce/Update manual files:
setwd("./ReconstPoFD")
devtools::document() ## makes the documentation using roxygen
## Checking
setwd("..")
devtools::check("ReconstPoFD")
## remove.packages("ReconstPoFD")
devtools::install("ReconstPoFD")
library("ReconstPoFD")
help(package="ReconstPoFD")
remove.packages("ReconstPoFD")
rm(list = ls())
library("devtools")
setwd("/home/dom/git_repos/ReconstPoFD")
## creats the basic package structure:
## devtools::create("ReconstPoFD")
## Produce/Update manual files:
setwd("./ReconstPoFD")
devtools::document() ## makes the documentation using roxygen
## Checking
setwd("..")
devtools::check("ReconstPoFD")
## remove.packages("ReconstPoFD")
devtools::install("ReconstPoFD")
