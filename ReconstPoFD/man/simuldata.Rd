% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SimulFun.R
\name{simuldata}
\alias{simuldata}
\title{Simulate Data}
\usage{
simuldata(n = 100, m = 15, a = 0, b = 1, n_basis = 10,
  DGP = c("DGP1", "DGP2")[1])
}
\arguments{
\item{n}{Number of functions}

\item{m}{Number of discretization points}

\item{a}{Lower interval boundary}

\item{b}{Upper interval boundary}

\item{n_basis}{Number of basis functions}

\item{DGP}{Data Generating Process. DGP1: Gaussian scores. DGP2: Exponential scores.}
}
\description{
This function allows to simulate partially observed functional data.
}
\examples{
 
a <- 0; b <- 10; m <- 15; n <- 100
mean_fun <- function(u){return( ((u-a)/(b-a)) +sin((u-a)/(b-a)))}
SimDat   <- simuldata(n = n, m = m, a = a, b = b)
## 
Y_mat       <- SimDat[['Y_mat']]
U_mat       <- SimDat[['U_mat']]
Y_true_mat  <- SimDat[['Y_true_mat']]
U_true_mat  <- SimDat[['U_true_mat']]
##
par(mfrow=c(2,1))
matplot(x=U_mat[,1:5], y=Y_mat[,1:5], col=gray(.5), type="l", main="Missings & Noise")
lines(x=U_true_mat[,1], y=mean_fun(U_true_mat[,1]), col="red")
matplot(x=U_true_mat[,1:5], y=Y_true_mat[,1:5], col=gray(.5), type="l", main="NoMissings & NoNoise")
lines(x=U_true_mat[,1], y=mean_fun(U_true_mat[,1]), col="red")
par(mfrow=c(1,1))
}
